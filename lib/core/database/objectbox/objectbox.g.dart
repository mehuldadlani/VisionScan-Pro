// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../features/history/data/models/scan_result_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1276851215810865012),
      name: 'ScanResultEntity',
      lastPropertyId: const obx_int.IdUid(10, 2925233532601089928),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8215608741162382503),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6400071447885546200),
            name: 'scanId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 6628311632179341131)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5787137488653030318),
            name: 'timestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7822182341334554900),
            name: 'extractedNumbersJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7599009977725227611),
            name: 'confidence',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3827354638956864069),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6238770482318896531),
            name: 'processingDurationMs',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1125257485297320120),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 427177739335042785),
            name: 'isFromGallery',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2925233532601089928),
            name: 'metadataJson',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 1276851215810865012),
      lastIndexId: const obx_int.IdUid(2, 6628311632179341131),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2895699136441255220],
      retiredIndexUids: const [722720308491940715],
      retiredPropertyUids: const [
        1285060387164559064,
        118500595171714668,
        3939774911194835993,
        8375377284248421063,
        7282245246401082044,
        3505799479985197872,
        8767587998791911391,
        8191158816327743663,
        7828168015994329586,
        7509263305863730750,
        2534234781674050565,
        888741431445913784,
        7985863536722064277,
        5208216982257931599,
        2657900265254995830,
        4873746778792535715
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ScanResultEntity: obx_int.EntityDefinition<ScanResultEntity>(
        model: _entities[0],
        toOneRelations: (ScanResultEntity object) => [],
        toManyRelations: (ScanResultEntity object) => {},
        getId: (ScanResultEntity object) => object.id,
        setId: (ScanResultEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ScanResultEntity object, fb.Builder fbb) {
          final scanIdOffset = fbb.writeString(object.scanId);
          final extractedNumbersJsonOffset =
              fbb.writeString(object.extractedNumbersJson);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final metadataJsonOffset = object.metadataJson == null
              ? null
              : fbb.writeString(object.metadataJson!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, scanIdOffset);
          fbb.addInt64(2, object.timestamp);
          fbb.addOffset(3, extractedNumbersJsonOffset);
          fbb.addFloat64(4, object.confidence);
          fbb.addOffset(5, imagePathOffset);
          fbb.addInt64(6, object.processingDurationMs);
          fbb.addOffset(7, notesOffset);
          fbb.addBool(8, object.isFromGallery);
          fbb.addOffset(9, metadataJsonOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final scanIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final extractedNumbersJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final confidenceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final processingDurationMsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final isFromGalleryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final metadataJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final object = ScanResultEntity(
              scanId: scanIdParam,
              timestamp: timestampParam,
              extractedNumbersJson: extractedNumbersJsonParam,
              confidence: confidenceParam,
              imagePath: imagePathParam,
              processingDurationMs: processingDurationMsParam,
              notes: notesParam,
              isFromGallery: isFromGalleryParam,
              metadataJson: metadataJsonParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ScanResultEntity] entity fields to define ObjectBox queries.
class ScanResultEntity_ {
  /// see [ScanResultEntity.id]
  static final id =
      obx.QueryIntegerProperty<ScanResultEntity>(_entities[0].properties[0]);

  /// see [ScanResultEntity.scanId]
  static final scanId =
      obx.QueryStringProperty<ScanResultEntity>(_entities[0].properties[1]);

  /// see [ScanResultEntity.timestamp]
  static final timestamp =
      obx.QueryIntegerProperty<ScanResultEntity>(_entities[0].properties[2]);

  /// see [ScanResultEntity.extractedNumbersJson]
  static final extractedNumbersJson =
      obx.QueryStringProperty<ScanResultEntity>(_entities[0].properties[3]);

  /// see [ScanResultEntity.confidence]
  static final confidence =
      obx.QueryDoubleProperty<ScanResultEntity>(_entities[0].properties[4]);

  /// see [ScanResultEntity.imagePath]
  static final imagePath =
      obx.QueryStringProperty<ScanResultEntity>(_entities[0].properties[5]);

  /// see [ScanResultEntity.processingDurationMs]
  static final processingDurationMs =
      obx.QueryIntegerProperty<ScanResultEntity>(_entities[0].properties[6]);

  /// see [ScanResultEntity.notes]
  static final notes =
      obx.QueryStringProperty<ScanResultEntity>(_entities[0].properties[7]);

  /// see [ScanResultEntity.isFromGallery]
  static final isFromGallery =
      obx.QueryBooleanProperty<ScanResultEntity>(_entities[0].properties[8]);

  /// see [ScanResultEntity.metadataJson]
  static final metadataJson =
      obx.QueryStringProperty<ScanResultEntity>(_entities[0].properties[9]);
}
